<style>
    #migration_logs {
        width: 100%;
        height: 200px;
        padding: 50px 0;
        text-align: left;
        background-color: rgba(232, 232, 232, 0.489);
        margin-top: 20px;
        display: block;
        overflow: scroll;
        white-space: pre-wrap;
    }

    .column {
        float: left;
        width: 50%;
        padding: 10px;
        height: 300px;
    }

    .row:after {
        content: "";
        display: table;
        clear: both;
    }
</style>

<div>
    <a class="btn-small branded" href="/logout">Logout</a>
    <a class="btn-small branded" href="/portal">Portal</a>
</div>
<hr>


<hr>

<body>

    <div class="row">
        <div class="column">

            </divp><b>Migrate your demo into demo.okta</b></p>

            <ul>Using this solution you can integrate any existing demo in portal.auth0.cloud into demo.okta as well as
                leverage the new demo.okta CIC AWS Private Cloud.</ul>

            <ul>Before you begin, please create an M2M application in the tenant you migrating FROM</ul>
            <ul>Use <a
                    href="https://auth0.com/docs/deploy-monitor/deploy-cli-tool/create-and-configure-the-deploy-cli-application"
                    target="_blank">this</a> doc to guide you through the process. Make a note of the client ids and
                secrets as you
                will need them below!</ul>
            <ul>If you need to migrate your users, head <a href="https://auth0.com/docs/manage-users/user-migration"
                    target="_blank">here</a> to learn how to use the CIC user migration tool.
                will need them below!</ul>
            <ul>The intent of this solution is to accelerate migration of demos to PoCs, PoCs to development
                environments and the
                use of unsupported legacy demo applications</ul>

            <ul><b>NOTE: If you have already migrated or created a demo to this CIC tenant, you will be unable to
                    migrate another tenant: this reduces conflicts and issues. Instead, simply create a new tenant and
                    create/migrate into that</b></ul>

            <form action="/migration/migrate_config" id="migrate_form" method="POST">

                <p><b>Tenant you want to migrate From</b></p>

                <input type="text" name="migrationDemoName" id="migrationDemoName" value="demo-okta-community" required
                    placeholder="Add the name of the demo you want to migrate. The subdomain of your Travel0 or Property0 tells you what this is" />
                <label for="migrationDemoName">Name of the Demo you want to migrate</label>

                <input type="text" name="from_domain" id="from_domain"
                    placeholder="Add the domain of the the tenant you want to migrate FROM. Example: tenantname.demo-platform.auth0app.com" />
                <label for="from_domain">Domain of the tenant to migrate FROM</label>

                <input type="text" name="from_client" id="from_client"
                    placeholder="Add the client_id of the the tenant you want to migrate FROM" />
                <label for="from_client">Client ID of the tenant to migrate FROM</label>

                <input type="text" name="from_secret" id="from_secret"
                    placeholder="Add the client_secret of the the tenant you want to migrate FROM" />
                <label for="from_secret">CLient Secret of the tenant to migrate FROM</label>

        </div>
        <div class="column">

            <ul><b>We STRONGLY recommend backing up your tenant config BEFORE migration. This follows any good migration
                    practice!</b></ul>

            <input type="button" class="btn-small branded" id="download_config" value="Download Config"
                onclick="return confirm('Download started. You file will be availabe shortly. Please store it safely'); " />
            <hr>
            <ul><b>While every effort has been made to migrate <i>everything</i>, in order to optimise the process
                    offered here, we do not migrate Actions, Client Grants, back-end Feature Flags, General Tenant
                    settings and Custom Domains. We saw these features creating many errors that broke the process. You
                    should be able to manually configure these features after the migration.</b></ul>

            <ul><b>This solution must NEVER be used for the migration of or migration to Production environments</b>
            </ul>
            <hr>
            <input type="submit" class="btn-small branded" value="Migrate my demo!"
                onclick="return confirm('Are you sure? By clicking Migrate, you understand that the tenant you are migrating will be changed and this change cannot be reversed'); " />
            </form>
            <hr>
            <pre id="migration_logs"> > Migration started!..</pre>
        </div>
    </div>
</body>

<br>
<hr>

<script>

    $("#download_config").click(function (e) {

        e.preventDefault(); // avoid to execute the actual submit of the form.

        var actionUrl = '/migration/migrate_config';

        var data = {
            "download": "true",
            "migrationDemoName": document.getElementById("migrationDemoName").value
        }

        $.ajax({
            type: "POST",
            url: actionUrl,
            data: data,
            success: function (data) {
               window.open(data.url, '_blank')
            },
            error: function (err) {
                $('#migration_logs').text(JSON.stringify(err, null, 2));

            }
        });

    });

    $("#migrate_form").submit(function (e) {

        e.preventDefault(); // avoid to execute the actual submit of the form.

        var form = $(this);
        var actionUrl = form.attr('action');

        $.ajax({
            type: "POST",
            url: actionUrl,
            data: form.serialize(), // serializes the form's elements.
            success: function (data) {
                $('#migration_logs').text(JSON.stringify(data, null, 2));
            },
            error: function (data) {
                $('#migration_logs').text(JSON.stringify(data, null, 2));
            }
        });

    });



</script>
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.schema = void 0;
const default_1 = __importDefault(require("./default"));
exports.schema = {
    type: 'array',
    items: {
        type: 'object',
        properties: {
            custom_domain_id: { type: 'string' },
            custom_client_ip_header: {
                type: 'string',
                nullable: true,
                enum: ['true-client-ip', 'cf-connecting-ip', 'x-forwarded-for', null],
            },
            domain: { type: 'string' },
            primary: { type: 'boolean' },
            status: { type: 'string', enum: ['pending_verification', 'ready', 'disabled', 'pending'] },
            type: { type: 'string', enum: ['auth0_managed_certs', 'self_managed_certs'] },
            verification: { type: 'object' },
        },
        required: ['domain', 'type'],
    },
};
class CustomDomainsHadnler extends default_1.default {
    constructor(config) {
        super(Object.assign(Object.assign({}, config), { type: 'customDomains', id: 'custom_domain_id', identifiers: ['domain'], stripCreateFields: ['status', 'primary', 'verification'], functions: {
                delete: (args) => this.client.customDomains.delete({ id: args.custom_domain_id }),
            } }));
    }
    objString(item) {
        return super.objString(item.domain);
    }
    getType() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.existing) {
                    return this.existing;
                }
                const customDomains = yield this.client.customDomains.getAll({ paginate: false });
                this.existing = customDomains;
                return customDomains;
            }
            catch (err) {
                if (err.statusCode === 403 &&
                    err.message ===
                        'The account is not allowed to perform this operation, please contact our support team') {
                    return null;
                }
                throw err;
            }
        });
    }
    processChanges(assets) {
        const _super = Object.create(null, {
            processChanges: { get: () => super.processChanges }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { customDomains } = assets;
            if (!customDomains)
                return;
            const changes = yield this.calcChanges(assets).then((changes) => {
                const changesWithoutUpdates = Object.assign(Object.assign({}, changes), { create: changes.create.map((customDomainToCreate) => {
                        const newCustomDomain = Object.assign({}, customDomainToCreate);
                        if (customDomainToCreate.custom_client_ip_header === null) {
                            delete newCustomDomain.custom_client_ip_header;
                        }
                        return newCustomDomain;
                    }), delete: changes.del.map((deleteToMake) => {
                        const deleteWithSDKCompatibleID = Object.assign(Object.assign({}, deleteToMake), { id: deleteToMake.custom_domain_id });
                        delete deleteWithSDKCompatibleID['custom_domain_id'];
                        return deleteWithSDKCompatibleID;
                    }), update: [] });
                return changesWithoutUpdates;
            });
            yield _super.processChanges.call(this, assets, changes);
        });
    }
}
exports.default = CustomDomainsHadnler;
//# sourceMappingURL=customDomains.js.map
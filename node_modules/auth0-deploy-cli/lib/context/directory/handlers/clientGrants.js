"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const tools_1 = require("../../../tools");
const utils_1 = require("../../../utils");
function parse(context) {
    const grantsFolder = path_1.default.join(context.filePath, tools_1.constants.CLIENTS_GRANTS_DIRECTORY);
    if (!(0, utils_1.existsMustBeDir)(grantsFolder))
        return { clientGrants: null }; // Skip
    const foundFiles = (0, utils_1.getFiles)(grantsFolder, ['.json']);
    const clientGrants = foundFiles
        .map((f) => (0, utils_1.loadJSON)(f, context.mappings))
        .filter((p) => Object.keys(p).length > 0); // Filter out empty grants
    return {
        clientGrants,
    };
}
function dump(context) {
    return __awaiter(this, void 0, void 0, function* () {
        const { clientGrants } = context.assets;
        if (!clientGrants)
            return; // Skip, nothing to dump
        const grantsFolder = path_1.default.join(context.filePath, tools_1.constants.CLIENTS_GRANTS_DIRECTORY);
        fs_extra_1.default.ensureDirSync(grantsFolder);
        // Convert client_id to the client name for readability
        clientGrants.forEach((grant) => {
            const dumpGrant = Object.assign({}, grant);
            if (context.assets.clientsOrig)
                dumpGrant.client_id = (0, utils_1.convertClientIdToName)(dumpGrant.client_id, context.assets.clientsOrig);
            const name = (0, utils_1.sanitize)(`${dumpGrant.client_id} (${dumpGrant.audience})`);
            const grantFile = path_1.default.join(grantsFolder, `${name}.json`);
            (0, utils_1.dumpJSON)(grantFile, dumpGrant);
        });
    });
}
const clientGrantsHandler = {
    parse,
    dump,
};
exports.default = clientGrantsHandler;
